using System;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Google.Apis;
using Google.Apis.Auth;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Core;
using Microsoft.Extensions.Logging;
using System.Text.Json;          
using System.Text.Json.Serialization; 
using Server_Side.Models;

namespace Server_Side.Services
{
    public class GoogleAIService
    {
        private readonly HttpClient _httpClient;
        private readonly GoogleCloudSettings _settings;
        private readonly ILogger<GoogleAIService> _logger;

        public GoogleAIService(HttpClient httpClient, GoogleCloudSettings settings, ILogger<GoogleAIService> logger)
        {
            _httpClient = httpClient;
            _settings = settings;
            _logger = logger;
        }

        // This method obtains an access token using the service account key directly from settings.
        private async Task<string> GetVertexAIAccessTokenAsync()
        {
            try
            {

                var credential = GoogleCredential
                    .FromStream(new MemoryStream(Encoding.UTF8.GetBytes(_settings.ServiceAccountKeyJson)))
                    .CreateScoped(new[] { "https://www.googleapis.com/auth/cloud-platform" });

                var accessToken = await credential.UnderlyingCredential.GetAccessTokenForRequestAsync();

                return accessToken;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to obtain Vertex AI access token. Check ServiceAccountKeyJson in appsettings.json and ensure it's valid JSON content.");
                throw; // Re-throw to propagate the error
            }
        }

    // --- Imagen 3.0 Image Generation ---
    public async Task<string[]> GenerateImageWithImagen3Async(string prompt, int sampleCount = 1, string aspectRatio = "16:9")
        {
            //var modelId = "imagen-3.0-generate-002"; // Standard Imagen 3.0 generation model ID
            var modelId = "imagen-4.0-fast-generate-preview-06-06";

            var requestBody = new
            {
                instances = new[]
                {
                    new { prompt = prompt }
                },
                parameters = new
                {
                    sampleCount = sampleCount,
                    aspectRatio = aspectRatio
                }
            };

            var jsonContent = JsonSerializer.Serialize(requestBody); // Using System.Text.Json
            var requestContent = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var accessToken = await GetVertexAIAccessTokenAsync();
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var endpoint = $"https://{_settings.Region}-aiplatform.googleapis.com/v1/projects/{_settings.ProjectId}/locations/{_settings.Region}/publishers/google/models/{modelId}:predict";
            _logger.LogInformation($"Calling Imagen 3.0 API at: {endpoint}");

            var response = await _httpClient.PostAsync(endpoint, requestContent);

            response.EnsureSuccessStatusCode(); // Throws an exception for 4xx or 5xx status codes

            var responseString = await response.Content.ReadAsStringAsync();
            _logger.LogWarning($"Raw response from Imagen API:\n{responseString}");
            _logger.LogInformation($"Imagen 3.0 API Raw Response (partial): {responseString.Substring(0, Math.Min(responseString.Length, 500))}"); // Log partial response to avoid giant logs

            // Parse the response to extract base64 images using System.Text.Json
            try
            {
                var apiResponse = JsonSerializer.Deserialize<Imagen3Response>(responseString);

                if (apiResponse?.Predictions == null || !apiResponse.Predictions.Any())
                {
                    _logger.LogWarning("No images generated by Imagen 3.0 API. 'predictions' array is null or empty. Full response: " + responseString);
                    return Array.Empty<string>(); // Return an empty array if no images
                }

                return apiResponse.Predictions.Select(p => p.BytesBase64Encoded).ToArray();
            }
            catch (JsonException ex)
            {
                _logger.LogError(ex, $"Failed to deserialize Imagen 3.0 API response: {ex.Message}. Raw response: {responseString}");
                throw new Exception("Failed to parse Imagen 3.0 API response.", ex);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"An unexpected error occurred while processing Imagen 3.0 API response: {ex.Message}. Raw response: {responseString}");
                throw;
            }
        }

        // --- Gemini 1.5 Pro / Flash Text Generation ---
        public async Task<string> GenerateTextWithGeminiAsync(string prompt, string modelName = "gemini-2.5-flash", int maxOutputTokens = 16384)
        {
            var fullModelName = modelName;

            var requestBody = new
            {
                contents = new[]
                {
            new
            {
                role = "user",
                parts = new[]
                {
                    new { text = prompt }
                }
            }
        },
                generationConfig = new
                {
                    temperature = 0.7,
                    topP = 0.95,
                    topK = 40,
                    maxOutputTokens = maxOutputTokens
                }
            };

            var jsonContent = JsonSerializer.Serialize(requestBody);
            var requestContent = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var accessToken = await GetVertexAIAccessTokenAsync();
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var endpoint = $"https://{_settings.Region}-aiplatform.googleapis.com/v1/projects/{_settings.ProjectId}/locations/{_settings.Region}/publishers/google/models/{fullModelName}:generateContent";
            _logger.LogInformation($"Calling Gemini API at: {endpoint}");

            var response = await _httpClient.PostAsync(endpoint, requestContent);

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                _logger.LogError($"Gemini API error {response.StatusCode}: {error}");
                throw new Exception($"Gemini API call failed: {error}");
            }

            var responseString = await response.Content.ReadAsStringAsync();

            try
            {
                var json = JsonSerializer.Deserialize<GeminiTextResponse>(responseString);
                var text = json?.Candidates?.FirstOrDefault()?.Content?.Parts?.FirstOrDefault()?.Text;

                if (string.IsNullOrEmpty(text))
                {
                    _logger.LogWarning("Gemini response contains no text.");
                    return string.Empty;
                }

                return text;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error parsing Gemini response.");
                throw new Exception("Failed to parse Gemini text response.", ex);
            }
        }

        // --- Internal Record Types for System.Text.Json Deserialization ---
        // These are helper types for parsing the API responses and are scoped within this service.

        // For Imagen 3.0 API Response
        internal record Imagen3Prediction(
            [property: JsonPropertyName("bytesBase64Encoded")] string BytesBase64Encoded,
            [property: JsonPropertyName("mimeType")] string MimeType
        );

        internal record Imagen3Response(
            [property: JsonPropertyName("predictions")] Imagen3Prediction[] Predictions
        );

        // For Gemini Text API Response
        internal record GeminiTextPart(
            [property: JsonPropertyName("text")] string Text
        );

        internal record GeminiTextContent(
            [property: JsonPropertyName("parts")] GeminiTextPart[] Parts
        );

        internal record GeminiTextCandidate(
            [property: JsonPropertyName("content")] GeminiTextContent Content
        );

        internal record GeminiTextResponse(
            [property: JsonPropertyName("candidates")] GeminiTextCandidate[] Candidates
        );
    }
}